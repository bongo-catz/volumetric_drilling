#!/usr/bin/env python3
"""
Quick test script to validate the new HDF5 structure as generated by data_record.py
"""

import h5py
import numpy as np
import tempfile
import os

def test_new_structure():
    """Test that the new HDF5 structure can be created correctly and matches data_record.py"""

    # Create a temporary file
    with tempfile.NamedTemporaryFile(suffix='.hdf5', delete=False) as tmp:
        temp_filename = tmp.name

    try:
        # Create HDF5 file with new structure matching data_record.py
        with h5py.File(temp_filename, 'w') as f:
            # Create main groups
            metadata = f.create_group("metadata_v3")
            vision_data = f.create_group("vision_data")
            physics_data = f.create_group("physics_data")

            # Create vision subgroups
            vision_intermittent = vision_data.create_group("intermittent_data")
            vision_continuous = vision_data.create_group("continuous_data")

            # Create physics subgroups
            physics_intermittent = physics_data.create_group("intermittent_data")
            physics_continuous = physics_data.create_group("continuous_data")

            # Add metadata datasets matching data_record.py
            metadata.create_dataset("camera_intrinsic", data=np.eye(3))
            metadata.create_dataset("camera_extrinsic", data=np.eye(4))
            metadata.create_dataset("README", data=(
                "All position information is in meters unless specified otherwise. \n"
                "Quaternion is a list in the order of [qx, qy, qz, qw]. \n"
                "Poses are defined to be T_world_obj. \n"
                "Depth in CV convention (corrected by extrinsic, T_cv_ambf). \n"
            ))
            metadata.create_dataset("baseline", data=0.06)  # Optional stereo baseline
            voxel_volume = metadata.create_dataset("voxel_volume", data=0.125)
            voxel_volume.attrs["units"] = "mm^3, millimeters cubed"

            # Add vision continuous data matching data_record.py
            vision_continuous.create_dataset("l_img", data=np.zeros((10, 480, 640, 3)))
            vision_continuous.create_dataset("r_img", data=np.zeros((10, 480, 640, 3)))
            vision_continuous.create_dataset("depth", data=np.zeros((10, 480, 640)))
            vision_continuous.create_dataset("segm", data=np.zeros((10, 480, 640, 3)))
            vision_continuous.create_dataset("time", data=np.arange(10, dtype=float))
            vision_continuous.create_dataset("pose_mastoidectomy_volume", data=np.zeros((10, 7)))

            # Add object poses (vision continuous) - matching container["pose_" + name]
            vision_continuous.create_dataset("pose_mastoidectomy_drill", data=np.zeros((10, 7)))
            vision_continuous.create_dataset("pose_main_camera", data=np.zeros((10, 7)))
            vision_continuous.create_dataset("pose_anatomy_object_name", data=np.zeros((10, 7)))

            # Create high_frequency_poses group and add object-specific pose groups
            high_freq_poses = physics_continuous.create_group("high_frequency_poses")

            # Add high-frequency pose data for each object - matching <object_name>_pose format
            drill_pose_group = high_freq_poses.create_group("mastoidectomy_drill_pose")
            drill_pose_group.create_dataset("time_stamp", data=np.arange(100, dtype=float) / 1000.0)
            drill_pose_group.create_dataset("pose", data=np.zeros((100, 7)))

            camera_pose_group = high_freq_poses.create_group("main_camera_pose")
            camera_pose_group.create_dataset("time_stamp", data=np.arange(100, dtype=float) / 1000.0)
            camera_pose_group.create_dataset("pose", data=np.zeros((100, 7)))

            anatomy_pose_group = high_freq_poses.create_group("anatomy_object_name_pose")
            anatomy_pose_group.create_dataset("time_stamp", data=np.arange(100, dtype=float) / 1000.0)
            anatomy_pose_group.create_dataset("pose", data=np.zeros((100, 7)))

            # Test intermittent data groups matching data_record.py
            voxels_group = physics_intermittent.create_group("voxels_removed")
            voxels_group.create_dataset("voxel_time_stamp", data=np.array([1.0, 2.0]))
            voxels_group.create_dataset("voxel_removed", data=np.zeros((5, 4)))  # [idx, x, y, z]
            voxels_group.create_dataset("voxel_color", data=np.zeros((5, 5)))  # [idx, r, g, b, a]
            voxels_group.create_dataset("README", data=(
                "voxels_removed contains a group of voxels (Gv) removed. \n"
                "The voxel_time_stamp contains the time that the Gv was removed. "
                "The voxels_removed contains the voxels that comprise the Gv. \n"
                "The voxel_color contains the color of voxels that comprise the Gv. \n"
            ))

            burr_group = physics_intermittent.create_group("burr_change")
            burr_group.create_dataset("time_stamp", data=np.array([1.5]))
            burr_group.create_dataset("burr_size", data=np.array([3.0]))

            force_group = physics_intermittent.create_group("drill_force_feedback")
            force_group.create_dataset("time_stamp", data=np.array([1.1, 1.2]))
            force_group.create_dataset("wrench", data=np.zeros((2, 6)))  # [fx, fy, fz, tx, ty, tz]

        # Verify structure
        with h5py.File(temp_filename, 'r') as f:
            print("HDF5 Structure Test Results:")
            print("=" * 60)

            # Check main groups
            expected_groups = ["metadata_v3", "vision_data", "physics_data"]
            for group in expected_groups:
                assert group in f, f"Missing main group: {group}"
                print(f"✓ Main group '{group}' exists")

            # Check metadata datasets
            metadata_datasets = ["camera_intrinsic", "camera_extrinsic", "README", "baseline", "voxel_volume"]
            for dataset in metadata_datasets:
                assert dataset in f["metadata_v3"], f"Missing metadata dataset: {dataset}"
                print(f"  ✓ Metadata dataset '{dataset}' exists")

            # Check vision subgroups
            vision_subgroups = ["intermittent_data", "continuous_data"]
            for subgroup in vision_subgroups:
                assert subgroup in f["vision_data"], f"Missing vision subgroup: {subgroup}"
                print(f"✓ Vision subgroup '{subgroup}' exists")

            # Check vision continuous datasets
            vision_datasets = ["l_img", "r_img", "depth", "segm", "time", "pose_mastoidectomy_volume"]
            for dataset in vision_datasets:
                assert dataset in f["vision_data/continuous_data"], f"Missing vision dataset: {dataset}"
                print(f"  ✓ Vision dataset '{dataset}' exists")

            # Check vision pose datasets (pose_<object_name> format)
            vision_pose_datasets = ["pose_mastoidectomy_drill", "pose_main_camera", "pose_anatomy_object_name"]
            for dataset in vision_pose_datasets:
                assert dataset in f["vision_data/continuous_data"], f"Missing vision pose: {dataset}"
                print(f"  ✓ Vision pose '{dataset}' exists (synchronized ~50Hz)")

            # Check physics subgroups
            physics_subgroups = ["intermittent_data", "continuous_data"]
            for subgroup in physics_subgroups:
                assert subgroup in f["physics_data"], f"Missing physics subgroup: {subgroup}"
                print(f"✓ Physics subgroup '{subgroup}' exists")

            # Check intermittent physics groups
            intermittent_groups = ["voxels_removed", "burr_change", "drill_force_feedback"]
            for group in intermittent_groups:
                assert group in f["physics_data/intermittent_data"], f"Missing intermittent group: {group}"
                print(f"  ✓ Intermittent group '{group}' exists")

            # Check voxels_removed datasets
            voxel_datasets = ["voxel_time_stamp", "voxel_removed", "voxel_color", "README"]
            for dataset in voxel_datasets:
                assert dataset in f["physics_data/intermittent_data/voxels_removed"], f"Missing voxel dataset: {dataset}"
                print(f"    ✓ Voxel dataset '{dataset}' exists")

            # Check burr_change datasets
            burr_datasets = ["time_stamp", "burr_size"]
            for dataset in burr_datasets:
                assert dataset in f["physics_data/intermittent_data/burr_change"], f"Missing burr dataset: {dataset}"
                print(f"    ✓ Burr dataset '{dataset}' exists")

            # Check drill_force_feedback datasets
            force_datasets = ["time_stamp", "wrench"]
            for dataset in force_datasets:
                assert dataset in f["physics_data/intermittent_data/drill_force_feedback"], f"Missing force dataset: {dataset}"
                print(f"    ✓ Force dataset '{dataset}' exists")

            # Check continuous physics groups
            assert "high_frequency_poses" in f["physics_data/continuous_data"], "Missing high_frequency_poses group"
            print("  ✓ Continuous group 'high_frequency_poses' exists")

            # Check high-frequency pose groups (<object_name>_pose format)
            high_freq_pose_groups = ["mastoidectomy_drill_pose", "main_camera_pose", "anatomy_object_name_pose"]
            for pose_group in high_freq_pose_groups:
                assert pose_group in f["physics_data/continuous_data/high_frequency_poses"], f"Missing high-freq pose: {pose_group}"
                print(f"    ✓ High-freq pose group '{pose_group}' exists (~2kHz)")

                # Check pose datasets
                pose_datasets = ["time_stamp", "pose"]
                for dataset in pose_datasets:
                    full_path = f"physics_data/continuous_data/high_frequency_poses/{pose_group}"
                    assert dataset in f[full_path], f"Missing dataset '{dataset}' in {pose_group}"
                    print(f"      ✓ Dataset '{dataset}' exists")

            # Verify pose naming conventions
            print("\n" + "=" * 60)
            print("Pose Naming Convention Validation:")
            print("=" * 60)
            print("✓ Vision poses use format: pose_<object_name>")
            print("  Examples: pose_mastoidectomy_drill, pose_main_camera")
            print("✓ Physics high-freq poses use format: <object_name>_pose")
            print("  Examples: mastoidectomy_drill_pose, main_camera_pose")

            print("\n✅ All structure tests passed!")
            print("The HDF5 structure matches data_record.py implementation.")

    finally:
        # Clean up
        if os.path.exists(temp_filename):
            os.unlink(temp_filename)

if __name__ == "__main__":
    test_new_structure()